diff --git a/R/RcppExports.R b/R/RcppExports.R
index f2fd3ca..5520ca1 100644
--- a/R/RcppExports.R
+++ b/R/RcppExports.R
@@ -1,4 +1,4 @@
-# This file was generated by Rcpp::compileAttributes
+# Generated by using Rcpp::compileAttributes() -> do not edit by hand
 # Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
 
 RtoAnovaCpp <- function(rparam, Y, X, isXvarIn, bID) {
diff --git a/src/RcppExports.cpp b/src/RcppExports.cpp
index ff0eebd..b1ddb48 100644
--- a/src/RcppExports.cpp
+++ b/src/RcppExports.cpp
@@ -1,4 +1,4 @@
-// This file was generated by Rcpp::compileAttributes
+// Generated by using Rcpp::compileAttributes() -> do not edit by hand
 // Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
 
 #include "mvabund_types.h"
@@ -11,23 +11,23 @@ using namespace Rcpp;
 List RtoAnovaCpp(const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& isXvarIn, Rcpp::Nullable<RcppGSL::Matrix>& bID);
 RcppExport SEXP mvabund_RtoAnovaCpp(SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP isXvarInSEXP, SEXP bIDSEXP) {
 BEGIN_RCPP
-    Rcpp::RObject __result;
-    Rcpp::RNGScope __rngScope;
+    Rcpp::RObject rcpp_result_gen;
+    Rcpp::RNGScope rcpp_rngScope_gen;
     Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type isXvarIn(isXvarInSEXP);
     Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
-    __result = Rcpp::wrap(RtoAnovaCpp(rparam, Y, X, isXvarIn, bID));
-    return __result;
+    rcpp_result_gen = Rcpp::wrap(RtoAnovaCpp(rparam, Y, X, isXvarIn, bID));
+    return rcpp_result_gen;
 END_RCPP
 }
 // RtoGlmAnova
 List RtoGlmAnova(const List& sparam, const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& O, RcppGSL::Matrix& isXvarIn, Rcpp::Nullable<RcppGSL::Matrix>& bID, RcppGSL::Vector& lambda);
 RcppExport SEXP mvabund_RtoGlmAnova(SEXP sparamSEXP, SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP isXvarInSEXP, SEXP bIDSEXP, SEXP lambdaSEXP) {
 BEGIN_RCPP
-    Rcpp::RObject __result;
-    Rcpp::RNGScope __rngScope;
+    Rcpp::RObject rcpp_result_gen;
+    Rcpp::RNGScope rcpp_rngScope_gen;
     Rcpp::traits::input_parameter< const List& >::type sparam(sparamSEXP);
     Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
@@ -36,30 +36,30 @@ BEGIN_RCPP
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type isXvarIn(isXvarInSEXP);
     Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Vector& >::type lambda(lambdaSEXP);
-    __result = Rcpp::wrap(RtoGlmAnova(sparam, rparam, Y, X, O, isXvarIn, bID, lambda));
-    return __result;
+    rcpp_result_gen = Rcpp::wrap(RtoGlmAnova(sparam, rparam, Y, X, O, isXvarIn, bID, lambda));
+    return rcpp_result_gen;
 END_RCPP
 }
 // RtoGlm
 List RtoGlm(const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& O);
 RcppExport SEXP mvabund_RtoGlm(SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP) {
 BEGIN_RCPP
-    Rcpp::RObject __result;
-    Rcpp::RNGScope __rngScope;
+    Rcpp::RObject rcpp_result_gen;
+    Rcpp::RNGScope rcpp_rngScope_gen;
     Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type O(OSEXP);
-    __result = Rcpp::wrap(RtoGlm(rparam, Y, X, O));
-    return __result;
+    rcpp_result_gen = Rcpp::wrap(RtoGlm(rparam, Y, X, O));
+    return rcpp_result_gen;
 END_RCPP
 }
 // RtoGlmSmry
 List RtoGlmSmry(const List& sparam, const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& O, Rcpp::Nullable<RcppGSL::Matrix>& bID, RcppGSL::Vector& lambda);
 RcppExport SEXP mvabund_RtoGlmSmry(SEXP sparamSEXP, SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP bIDSEXP, SEXP lambdaSEXP) {
 BEGIN_RCPP
-    Rcpp::RObject __result;
-    Rcpp::RNGScope __rngScope;
+    Rcpp::RObject rcpp_result_gen;
+    Rcpp::RNGScope rcpp_rngScope_gen;
     Rcpp::traits::input_parameter< const List& >::type sparam(sparamSEXP);
     Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
@@ -67,21 +67,21 @@ BEGIN_RCPP
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type O(OSEXP);
     Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Vector& >::type lambda(lambdaSEXP);
-    __result = Rcpp::wrap(RtoGlmSmry(sparam, rparam, Y, X, O, bID, lambda));
-    return __result;
+    rcpp_result_gen = Rcpp::wrap(RtoGlmSmry(sparam, rparam, Y, X, O, bID, lambda));
+    return rcpp_result_gen;
 END_RCPP
 }
 // RtoSmryCpp
 List RtoSmryCpp(const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, Rcpp::Nullable<RcppGSL::Matrix>& bID);
 RcppExport SEXP mvabund_RtoSmryCpp(SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP bIDSEXP) {
 BEGIN_RCPP
-    Rcpp::RObject __result;
-    Rcpp::RNGScope __rngScope;
+    Rcpp::RObject rcpp_result_gen;
+    Rcpp::RNGScope rcpp_rngScope_gen;
     Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
     Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
     Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
-    __result = Rcpp::wrap(RtoSmryCpp(rparam, Y, X, bID));
-    return __result;
+    rcpp_result_gen = Rcpp::wrap(RtoSmryCpp(rparam, Y, X, bID));
+    return rcpp_result_gen;
 END_RCPP
 }
diff --git a/src/mvabund_types.h b/src/mvabund_types.h
index b97b796..7f8393e 100644
--- a/src/mvabund_types.h
+++ b/src/mvabund_types.h
@@ -11,127 +11,3 @@
 // The name of the file -- in the form PACKAGENAME_types.h -- is a convention used by
 // Rcpp Attributes as we need the types defined here in the auto-generated interface.
 
-#ifndef Rcpp_Nullable_h
-#define Rcpp_Nullable_h
-
-// We also need to (re-)include Rcpp.h to define traits etc. The remainder 
-// of the file is unchanged relative to Rcpp's inst/include/Rcpp/Nullable.h
-#include <Rcpp.h>
-
-// We looked into the safe_bool_idiom [1] but found that more trouble than is
-// warranted here.  We first and foremost want an operator SEXP() which got in
-// the way of redefining operator bool.
-// [1] http://www.artima.com/cppsource/safebool.html)
-
-
-namespace Rcpp {
-
-    template<class T>
-    class Nullable {
-    private:
-        template<class U>
-        friend class InputParameter;
-
-        template<class U>
-        friend class traits::Exporter;
-
-    public:
-
-        /**
-         * Empty no-argument constructor of a Nullable object
-         *
-         * Assigns (R's) NULL value, and sets validator to FALSE
-         */
-        inline Nullable() : m_sexp(R_NilValue), m_set(false) {}
-
-        /**
-         * Template constructor of a Nullable object
-         *
-         * Assigns object, and set validator to TRUE
-         */
-
-        inline Nullable(const T &t) : m_sexp(t),  m_set(true) {}
-
-    protected:
-
-        /**
-         * Standard constructor of a Nullable object
-         *
-         * @param SEXP is stored
-         */
-        inline Nullable(SEXP t) {
-            m_sexp = t;
-            m_set = true;
-        }
-
-    public:
-
-        /**
-         * Copy constructor for Nullable object
-         *
-         * @param SEXP is used to update internal copy
-         */
-        inline Nullable &operator=(SEXP sexp) {
-            m_sexp = sexp;
-            m_set = true;
-            return *this;
-        }
-
-        /**
-         * operator SEXP() to return nullable object
-         *
-         * @throw 'not initialized' if object has not been set
-         */
-        inline operator SEXP() {
-            checkIfSet();
-            return m_sexp;
-        }
-
-        /**
-         * get() accessor for object
-         *
-         * @throw 'not initialized' if object has not been set
-         */
-        inline SEXP get() {
-            checkIfSet();
-            return m_sexp;
-        }
-
-        /**
-         * Boolean test for NULL
-         *
-         * @throw 'not initialized' if object has not been set
-         */
-        inline bool isNull() const {
-            checkIfSet();
-            return Rf_isNull(m_sexp);
-        }
-
-        /**
-         * Boolean test for not NULL
-         *
-         * @throw 'not initialized' if object has not been set
-         */
-        inline bool isNotNull() const {
-            return ! isNull();
-        }
-
-        /**
-         * Test function to check if object has been initialized
-         *
-         */
-        inline bool isSet(void) const { return m_set; }
-
-    private:
-        SEXP m_sexp;
-        bool m_set;
-
-        inline void checkIfSet(void) const {
-            if (!m_set) {
-                throw ::Rcpp::exception("Not initialized");
-            }
-        }
-    };
-}
-
-#endif
